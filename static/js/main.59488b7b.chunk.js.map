{"version":3,"sources":["redux/actions.js","redux/reducers.js","Components/User.js","Components/Comment.js","Components/CommentHandler.js","Components/CommentList.js","Components/Post.js","Components/PostHandler.js","Components/PostListHandler.js","Components/PostList.js","App.js","serviceWorker.js","index.js"],"names":["LOAD_DATA","FILL_DATA","REMOVE_POST","REMOVE_COMMENT","SEARCH_POSTS","load","dispatch","type","Promise","all","fetch","then","res","json","_ref","_ref2","Object","slicedToArray","posts","users","comments","postsData","map","post","objectSpread","user","find","userId","id","data","commentsData","fillData","initialState","requested","search","searchedPosts","User","props","name","email","address","react_default","a","createElement","className","href","Comment","title","body","removeComment","key","onClick","CommentHandler","connect","state","ownProps","comment","CommentList","Components_CommentHandler","Post","userName","userEmail","userAddress","removePost","postCcomments","filter","postId","Components_User","Components_CommentList","PostHandler","city","PostListHandler","postsRequested","postSearched","buttonClicked","inputFilled","inputValue","searchPosts","createdPosts","disabled","forEach","postsComments","push","Components_PostHandler","onChange","event","target","value","placeholder","store","createStore","arguments","length","undefined","action","searched","serchText","trim","includes","applyMiddleware","thunk","App","es","Components_PostListHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.59488b7b.chunk.js","sourcesContent":["export const LOAD_DATA = 'load_data';\nexport const FILL_DATA = 'fill_data';\nexport const REMOVE_POST = 'remove_post';\nexport const REMOVE_COMMENT = 'remove_comment';\nexport const SEARCH_POSTS = 'search_posts';\n\nexport function load() {\n  return dispatch => {\n    dispatch({\n        type: LOAD_DATA\n    });\n\n    Promise.all([\n      fetch('https://jsonplaceholder.typicode.com/posts')\n        .then(res => res.json()),\n      fetch('https://jsonplaceholder.typicode.com/users')\n        .then(res => res.json()),\n      fetch('https://jsonplaceholder.typicode.com/comments')\n        .then(res => res.json())\n    ])\n    .then(([posts, users, comments]) => {\n      const postsData = posts.map((post) => ({\n        ...post,\n        user: users.find(user => post.userId === user.id),\n        // comments: comments.filter(comment => comment.postId === post.id)\n      }))\n      const commentsData = comments;\n      dispatch(fillData(postsData, commentsData));\n    })\n  }\n}\n\nexport function fillData(data, commentsData) {\n  return {\n    type: FILL_DATA,\n    data,\n    commentsData\n  }\n}\n\nexport function removePost(id) {\n  return {\n    type: REMOVE_POST,\n    id\n  }\n}\n\nexport function removeComment(id) {\n  return {\n    type: REMOVE_COMMENT,\n    id\n  }\n}\n\nexport function searchPosts(inputValue) {\n  return {\n    type: SEARCH_POSTS,\n    inputValue\n  }\n}\n","import { LOAD_DATA,\n         FILL_DATA,\n         REMOVE_POST,\n         REMOVE_COMMENT,\n         SEARCH_POSTS } from \"./actions\";\n\nconst initialState = {\n  requested: false,\n  data: null,\n  comments: null,\n  search: false,\n  searchedPosts: null\n};\n\nexport function getNextState(state = initialState, action) {\n  switch (action.type) {\n    case LOAD_DATA:\n      return {\n        ...state,\n        requested: true\n      };\n    case FILL_DATA:\n      return {\n        ...state,\n        data: action.data,\n        comments: action.commentsData\n      }\n    case REMOVE_POST:\n      const searched = state.search ? state.searchedPosts : null;\n      return {\n        ...state,\n        data: state.data.filter(post => post.id !== action.id),\n        searchedPosts: state.search\n                       ? searched.filter(post => post.id !== action.id)\n                       : state.searchedPosts\n      }\n    case REMOVE_COMMENT:\n      return {\n        ...state,\n        comments: state.comments.filter(comment => comment.id !== action.id)\n      }\n    case SEARCH_POSTS:\n      const serchText = action.inputValue.trim();\n      const searchedPosts = state.data.filter(post => {\n        return post.title.includes(serchText) || post.body.includes(serchText);\n      });\n\n      return {\n        ...state,\n        search: true,\n        searchedPosts: searchedPosts\n      }\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport '../styles/User.css';\n\nfunction User(props) {\n  const { name, email, address } = props;\n\n  return (\n    <div className=\"user\">\n      <p><i>{name},</i> {address}</p>\n      <a href={\"mailto:\" + email}>{email} <span className=\"envelope\">&#9993;</span></a>\n    </div>\n  );\n}\n\nexport default User;\n","import React from 'react';\nimport '../styles/Comment.css';\n\nfunction Comment(props) {\n  const { title, body, email, id, removeComment } = props;\n\n  return (\n    <div key={title} className=\"comment\">\n      <div className=\"title\">\n        <h4>{title}</h4>\n        <button className=\"remove\" onClick={() => removeComment(id)}>&times;</button>\n      </div>\n      <p>{body}</p>\n      <a href={\"mailto:\" + email}>{email} <span className=\"envelope\">&#9993;</span></a>\n    </div>\n  );\n}\n\nexport default Comment;\n","import { connect } from 'react-redux';\nimport { removeComment } from '../redux/actions';\nimport Comment from './Comment';\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    title: ownProps.comment.name,\n    body: ownProps.comment.body,\n    email: ownProps.comment.email,\n    id: ownProps.comment.id\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    removeComment: (id) => dispatch(removeComment(id))\n  }\n}\n\nconst CommentHandler = connect(mapStateToProps, mapDispatchToProps)(Comment);\n\nexport default CommentHandler;\n","import React from 'react';\nimport '../styles/CommentList.css';\nimport CommentHandler from './CommentHandler';\nimport '../styles/CommentList.css';\n\nfunction CommentList(props) {\n  return (\n    <div className=\"comments\">\n      {props.comments.map(comment => <CommentHandler comment={comment} key={comment.id} />)}\n    </div>\n  );\n}\n\nexport default CommentList;\n","import React from 'react';\nimport '../styles/Post.css';\nimport User from './User';\nimport CommentList from './CommentList';\n\nfunction Post(props) {\n  const { id,\n          title,\n          body,\n          userName,\n          userEmail,\n          userAddress,\n          comments,\n          removePost } = props;\n  const postCcomments = comments.filter(comment => comment.postId === id);\n\n  return (\n    <article key={id} className=\"post\">\n      <div className=\"title\">\n        <h3>{title}</h3>\n        <button className=\"remove\" onClick={() => removePost(id)}>&times;</button>\n      </div>\n      <User name={userName}\n            email={userEmail}\n            address={userAddress}\n      />\n      <p>{body}</p>\n      <CommentList comments={postCcomments} />\n    </article>\n  );\n}\n\nexport default Post;\n","import { connect } from 'react-redux';\nimport { removePost } from '../redux/actions';\nimport Post from './Post';\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    id: ownProps.post.id,\n    title: ownProps.post.title,\n    body: ownProps.post.body,\n    userName: ownProps.post.user.name,\n    userEmail: ownProps.post.user.email,\n    userAddress: ownProps.post.user.address.city,\n    comments: state.comments\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    removePost: (id) => dispatch(removePost(id))\n  }\n}\n\nconst PostHandler = connect(mapStateToProps, mapDispatchToProps)(Post);\n\nexport default PostHandler;\n","import { connect } from 'react-redux';\nimport { load, searchPosts } from '../redux/actions';\nimport PostList from './PostList';\n\nfunction mapStateToProps(state) {\n  return {\n    postsRequested: state.requested,\n    postsData: state.data,\n    commentsData: state.comments,\n    postSearched: state.search,\n    searchedPosts: state.searchedPosts\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    buttonClicked: () => dispatch(load()),\n    inputFilled: inputValue => dispatch(searchPosts(inputValue))\n  }\n}\n\nconst PostListHandler = connect(mapStateToProps, mapDispatchToProps)(PostList);\n\nexport default PostListHandler;\n","import React from 'react';\nimport PostHandler from './PostHandler';\nimport '../styles/PostList.css';\n\nexport default function PostList(props) {\n  const { postsRequested,\n          postsData,\n          commentsData,\n          postSearched,\n          searchedPosts,\n          buttonClicked,\n          inputFilled } = props;\n  const createdPosts = [];\n\n  if (!postsRequested){\n    return <button onClick={buttonClicked} className=\"load\">Load posts</button>;\n  } else {\n    if (postsData === null) {\n      return <button className=\"load\" disabled>Loading...</button>;\n    } else {\n      (postSearched ? searchedPosts : postsData).forEach(post => {\n        const postsComments = commentsData.filter(comment => comment.postId === post.id);\n\n        createdPosts.push(<PostHandler post={post} postsComments={postsComments} key={post.id} />);\n      });\n\n      return (\n        <section className=\"posts-page\">\n          <input className=\"search\"\n                 onChange={(event) => inputFilled(event.target.value)}\n                 placeholder=\"Search...\"\n          />\n          {createdPosts}\n        </section>\n      );\n    }\n  }\n}\n","import React from 'react';\nimport {createStore, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport { getNextState } from './redux/reducers';\nimport PostListHandler from './Components/PostListHandler';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(getNextState, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PostListHandler />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}